// Code generated by goa v3.14.1, DO NOT EDIT.
//
// books HTTP server types
//
// Command:
// $ goa gen bookapp/design

package server

import (
	books "bookapp/gen/books"
	booksviews "bookapp/gen/books/views"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "books" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// Title of the book
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Author of the book
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// Book cover image
	BookCover *FileRequestBody `form:"book_cover,omitempty" json:"book_cover,omitempty" xml:"book_cover,omitempty"`
	// Published date of the book
	PublishedAt *string `form:"published_at,omitempty" json:"published_at,omitempty" xml:"published_at,omitempty"`
}

// UpdateRequestBody is the type of the "books" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	// Title of the book
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Author of the book
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// Book cover image
	BookCover *FileRequestBody `form:"book_cover,omitempty" json:"book_cover,omitempty" xml:"book_cover,omitempty"`
	// Published date of the book
	PublishedAt *string `form:"published_at,omitempty" json:"published_at,omitempty" xml:"published_at,omitempty"`
}

// BookCollection is the type of the "books" service "findAll" endpoint HTTP
// response body.
type BookCollection []*Book

// FindByIDResponseBody is the type of the "books" service "findById" endpoint
// HTTP response body.
type FindByIDResponseBody BookResponseBody

// FindByIDNotFoundResponseBody is the type of the "books" service "findById"
// endpoint HTTP response body for the "NotFound" error.
type FindByIDNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateNotFoundResponseBody is the type of the "books" service "update"
// endpoint HTTP response body for the "NotFound" error.
type UpdateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteNotFoundResponseBody is the type of the "books" service "delete"
// endpoint HTTP response body for the "NotFound" error.
type DeleteNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// Book is used to define fields on response body types.
type Book struct {
	// ID of book
	ID int `form:"id" json:"id" xml:"id"`
	// Title of book
	Title string `form:"title" json:"title" xml:"title"`
	// Author of book
	Author string `form:"author" json:"author" xml:"author"`
	// Image File base64
	BookCoverBytes []byte `form:"book_cover_bytes,omitempty" json:"book_cover_bytes,omitempty" xml:"book_cover_bytes,omitempty"`
	// Book cover file name
	BookCoverFileName *string `form:"book_cover_file_name,omitempty" json:"book_cover_file_name,omitempty" xml:"book_cover_file_name,omitempty"`
	// Book cover file type
	BookCoverFileType *string `form:"book_cover_file_type,omitempty" json:"book_cover_file_type,omitempty" xml:"book_cover_file_type,omitempty"`
	// Published date of the book
	PublishedAt string `form:"published_at" json:"published_at" xml:"published_at"`
}

// BookResponseBody is used to define fields on response body types.
type BookResponseBody struct {
	// ID of book
	ID int `form:"id" json:"id" xml:"id"`
	// Title of book
	Title string `form:"title" json:"title" xml:"title"`
	// Author of book
	Author string `form:"author" json:"author" xml:"author"`
	// Image File base64
	BookCoverBytes []byte `form:"book_cover_bytes,omitempty" json:"book_cover_bytes,omitempty" xml:"book_cover_bytes,omitempty"`
	// Book cover file name
	BookCoverFileName *string `form:"book_cover_file_name,omitempty" json:"book_cover_file_name,omitempty" xml:"book_cover_file_name,omitempty"`
	// Book cover file type
	BookCoverFileType *string `form:"book_cover_file_type,omitempty" json:"book_cover_file_type,omitempty" xml:"book_cover_file_type,omitempty"`
	// Published date of the book
	PublishedAt string `form:"published_at" json:"published_at" xml:"published_at"`
}

// FileRequestBody is used to define fields on request body types.
type FileRequestBody struct {
	Type  *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	Bytes []byte  `form:"bytes,omitempty" json:"bytes,omitempty" xml:"bytes,omitempty"`
	Name  *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// NewBookCollection builds the HTTP response body from the result of the
// "findAll" endpoint of the "books" service.
func NewBookCollection(res booksviews.BookCollectionView) BookCollection {
	body := make([]*Book, len(res))
	for i, val := range res {
		body[i] = marshalBooksviewsBookViewToBook(val)
	}
	return body
}

// NewFindByIDResponseBody builds the HTTP response body from the result of the
// "findById" endpoint of the "books" service.
func NewFindByIDResponseBody(res *booksviews.BookView) *FindByIDResponseBody {
	body := &FindByIDResponseBody{
		ID:                *res.ID,
		Title:             *res.Title,
		Author:            *res.Author,
		BookCoverBytes:    res.BookCoverBytes,
		BookCoverFileName: res.BookCoverFileName,
		BookCoverFileType: res.BookCoverFileType,
		PublishedAt:       *res.PublishedAt,
	}
	return body
}

// NewFindByIDNotFoundResponseBody builds the HTTP response body from the
// result of the "findById" endpoint of the "books" service.
func NewFindByIDNotFoundResponseBody(res *goa.ServiceError) *FindByIDNotFoundResponseBody {
	body := &FindByIDNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateNotFoundResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "books" service.
func NewUpdateNotFoundResponseBody(res *goa.ServiceError) *UpdateNotFoundResponseBody {
	body := &UpdateNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteNotFoundResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "books" service.
func NewDeleteNotFoundResponseBody(res *goa.ServiceError) *DeleteNotFoundResponseBody {
	body := &DeleteNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewFindByIDPayload builds a books service findById endpoint payload.
func NewFindByIDPayload(id int) *books.FindByIDPayload {
	v := &books.FindByIDPayload{}
	v.ID = &id

	return v
}

// NewCreatePayload builds a books service create endpoint payload.
func NewCreatePayload(body *CreateRequestBody) *books.CreatePayload {
	v := &books.CreatePayload{
		Title:       *body.Title,
		Author:      *body.Author,
		PublishedAt: *body.PublishedAt,
	}
	if body.BookCover != nil {
		v.BookCover = unmarshalFileRequestBodyToBooksFile(body.BookCover)
	}

	return v
}

// NewUpdatePayload builds a books service update endpoint payload.
func NewUpdatePayload(body *UpdateRequestBody, id int) *books.UpdatePayload {
	v := &books.UpdatePayload{
		Title:       body.Title,
		Author:      body.Author,
		PublishedAt: body.PublishedAt,
	}
	if body.BookCover != nil {
		v.BookCover = unmarshalFileRequestBodyToBooksFile(body.BookCover)
	}
	v.ID = id

	return v
}

// NewDeletePayload builds a books service delete endpoint payload.
func NewDeletePayload(id int) *books.DeletePayload {
	v := &books.DeletePayload{}
	v.ID = &id

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Author == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("author", "body"))
	}
	if body.PublishedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("published_at", "body"))
	}
	return
}
