// Code generated by goa v3.14.1, DO NOT EDIT.
//
// books HTTP client CLI support package
//
// Command:
// $ goa gen bookapp/design

package client

import (
	books "bookapp/gen/books"
	"encoding/json"
	"fmt"
	"strconv"
)

// BuildFindByIDPayload builds the payload for the books findById endpoint from
// CLI flags.
func BuildFindByIDPayload(booksFindByIDID string) (*books.FindByIDPayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(booksFindByIDID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &books.FindByIDPayload{}
	v.ID = &id

	return v, nil
}

// BuildCreatePayload builds the payload for the books create endpoint from CLI
// flags.
func BuildCreatePayload(booksCreateBody string) (*books.CreatePayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(booksCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"author\": \"Repellendus itaque et.\",\n      \"book_cover\": {\n         \"bytes\": \"SW4gcmVtIG5vbi4=\",\n         \"name\": \"Architecto sapiente nesciunt aut repellendus rerum quia.\",\n         \"type\": \"Rerum enim quibusdam qui qui hic quia.\"\n      },\n      \"published_at\": \"2024-01-27\",\n      \"title\": \"Cum quia.\"\n   }'")
		}
	}
	v := &books.CreatePayload{
		Title:       body.Title,
		Author:      body.Author,
		PublishedAt: body.PublishedAt,
	}
	if body.BookCover != nil {
		v.BookCover = marshalFileRequestBodyToBooksFile(body.BookCover)
	}

	return v, nil
}

// BuildUpdatePayload builds the payload for the books update endpoint from CLI
// flags.
func BuildUpdatePayload(booksUpdateBody string, booksUpdateID string) (*books.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(booksUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"author\": \"Tenetur nemo amet iste saepe molestias est.\",\n      \"book_cover\": {\n         \"bytes\": \"SW4gcmVtIG5vbi4=\",\n         \"name\": \"Architecto sapiente nesciunt aut repellendus rerum quia.\",\n         \"type\": \"Rerum enim quibusdam qui qui hic quia.\"\n      },\n      \"published_at\": \"2023-12-31\",\n      \"title\": \"Consequatur sapiente aut occaecati.\"\n   }'")
		}
	}
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(booksUpdateID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &books.UpdatePayload{
		Title:       body.Title,
		Author:      body.Author,
		PublishedAt: body.PublishedAt,
	}
	if body.BookCover != nil {
		v.BookCover = marshalFileRequestBodyToBooksFile(body.BookCover)
	}
	v.ID = id

	return v, nil
}

// BuildDeletePayload builds the payload for the books delete endpoint from CLI
// flags.
func BuildDeletePayload(booksDeleteID string) (*books.DeletePayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(booksDeleteID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &books.DeletePayload{}
	v.ID = &id

	return v, nil
}
