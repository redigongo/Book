// Code generated by goa v3.14.1, DO NOT EDIT.
//
// books client HTTP transport
//
// Command:
// $ goa gen bookapp/design

package client

import (
	books "bookapp/gen/books"
	"context"
	"mime/multipart"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the books service endpoint HTTP clients.
type Client struct {
	// FindAll Doer is the HTTP client used to make requests to the findAll
	// endpoint.
	FindAllDoer goahttp.Doer

	// FindByID Doer is the HTTP client used to make requests to the findById
	// endpoint.
	FindByIDDoer goahttp.Doer

	// Create Doer is the HTTP client used to make requests to the create endpoint.
	CreateDoer goahttp.Doer

	// Update Doer is the HTTP client used to make requests to the update endpoint.
	UpdateDoer goahttp.Doer

	// Delete Doer is the HTTP client used to make requests to the delete endpoint.
	DeleteDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// BooksCreateEncoderFunc is the type to encode multipart request for the
// "books" service "create" endpoint.
type BooksCreateEncoderFunc func(*multipart.Writer, *books.CreatePayload) error

// BooksUpdateEncoderFunc is the type to encode multipart request for the
// "books" service "update" endpoint.
type BooksUpdateEncoderFunc func(*multipart.Writer, *books.UpdatePayload) error

// NewClient instantiates HTTP clients for all the books service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		FindAllDoer:         doer,
		FindByIDDoer:        doer,
		CreateDoer:          doer,
		UpdateDoer:          doer,
		DeleteDoer:          doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// FindAll returns an endpoint that makes HTTP requests to the books service
// findAll server.
func (c *Client) FindAll() goa.Endpoint {
	var (
		decodeResponse = DecodeFindAllResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildFindAllRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.FindAllDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("books", "findAll", err)
		}
		return decodeResponse(resp)
	}
}

// FindByID returns an endpoint that makes HTTP requests to the books service
// findById server.
func (c *Client) FindByID() goa.Endpoint {
	var (
		decodeResponse = DecodeFindByIDResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildFindByIDRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.FindByIDDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("books", "findById", err)
		}
		return decodeResponse(resp)
	}
}

// Create returns an endpoint that makes HTTP requests to the books service
// create server.
func (c *Client) Create(booksCreateEncoderFn BooksCreateEncoderFunc) goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateRequest(NewBooksCreateEncoder(booksCreateEncoderFn))
		decodeResponse = DecodeCreateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("books", "create", err)
		}
		return decodeResponse(resp)
	}
}

// Update returns an endpoint that makes HTTP requests to the books service
// update server.
func (c *Client) Update(booksUpdateEncoderFn BooksUpdateEncoderFunc) goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateRequest(NewBooksUpdateEncoder(booksUpdateEncoderFn))
		decodeResponse = DecodeUpdateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("books", "update", err)
		}
		return decodeResponse(resp)
	}
}

// Delete returns an endpoint that makes HTTP requests to the books service
// delete server.
func (c *Client) Delete() goa.Endpoint {
	var (
		decodeResponse = DecodeDeleteResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("books", "delete", err)
		}
		return decodeResponse(resp)
	}
}
