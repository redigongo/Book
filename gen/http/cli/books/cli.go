// Code generated by goa v3.14.1, DO NOT EDIT.
//
// books HTTP client CLI support package
//
// Command:
// $ goa gen bookapp/design

package cli

import (
	booksc "bookapp/gen/http/books/client"
	"flag"
	"fmt"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `books (find-all|find-by-id|create|update|delete)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` books find-all` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
	booksCreateEncoderFn booksc.BooksCreateEncoderFunc,
	booksUpdateEncoderFn booksc.BooksUpdateEncoderFunc,
) (goa.Endpoint, any, error) {
	var (
		booksFlags = flag.NewFlagSet("books", flag.ContinueOnError)

		booksFindAllFlags = flag.NewFlagSet("find-all", flag.ExitOnError)

		booksFindByIDFlags  = flag.NewFlagSet("find-by-id", flag.ExitOnError)
		booksFindByIDIDFlag = booksFindByIDFlags.String("id", "REQUIRED", "Book ID")

		booksCreateFlags    = flag.NewFlagSet("create", flag.ExitOnError)
		booksCreateBodyFlag = booksCreateFlags.String("body", "REQUIRED", "")

		booksUpdateFlags    = flag.NewFlagSet("update", flag.ExitOnError)
		booksUpdateBodyFlag = booksUpdateFlags.String("body", "REQUIRED", "")
		booksUpdateIDFlag   = booksUpdateFlags.String("id", "REQUIRED", "Book ID")

		booksDeleteFlags  = flag.NewFlagSet("delete", flag.ExitOnError)
		booksDeleteIDFlag = booksDeleteFlags.String("id", "REQUIRED", "Book ID")
	)
	booksFlags.Usage = booksUsage
	booksFindAllFlags.Usage = booksFindAllUsage
	booksFindByIDFlags.Usage = booksFindByIDUsage
	booksCreateFlags.Usage = booksCreateUsage
	booksUpdateFlags.Usage = booksUpdateUsage
	booksDeleteFlags.Usage = booksDeleteUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "books":
			svcf = booksFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "books":
			switch epn {
			case "find-all":
				epf = booksFindAllFlags

			case "find-by-id":
				epf = booksFindByIDFlags

			case "create":
				epf = booksCreateFlags

			case "update":
				epf = booksUpdateFlags

			case "delete":
				epf = booksDeleteFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "books":
			c := booksc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "find-all":
				endpoint = c.FindAll()
				data = nil
			case "find-by-id":
				endpoint = c.FindByID()
				data, err = booksc.BuildFindByIDPayload(*booksFindByIDIDFlag)
			case "create":
				endpoint = c.Create(booksCreateEncoderFn)
				data, err = booksc.BuildCreatePayload(*booksCreateBodyFlag)
			case "update":
				endpoint = c.Update(booksUpdateEncoderFn)
				data, err = booksc.BuildUpdatePayload(*booksUpdateBodyFlag, *booksUpdateIDFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = booksc.BuildDeletePayload(*booksDeleteIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// booksUsage displays the usage of the books command and its subcommands.
func booksUsage() {
	fmt.Fprintf(os.Stderr, `Books Service
Usage:
    %[1]s [globalflags] books COMMAND [flags]

COMMAND:
    find-all: FindAll Books
    find-by-id: Find book by id
    create: Create a new book.
    update: Update a book.
    delete: Delete a book.

Additional help:
    %[1]s books COMMAND --help
`, os.Args[0])
}
func booksFindAllUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] books find-all

FindAll Books

Example:
    %[1]s books find-all
`, os.Args[0])
}

func booksFindByIDUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] books find-by-id -id INT

Find book by id
    -id INT: Book ID

Example:
    %[1]s books find-by-id --id 4935245108424423840
`, os.Args[0])
}

func booksCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] books create -body JSON

Create a new book.
    -body JSON: 

Example:
    %[1]s books create --body '{
      "author": "Repellendus itaque et.",
      "book_cover": {
         "bytes": "SW4gcmVtIG5vbi4=",
         "name": "Architecto sapiente nesciunt aut repellendus rerum quia.",
         "type": "Rerum enim quibusdam qui qui hic quia."
      },
      "published_at": "2024-01-27",
      "title": "Cum quia."
   }'
`, os.Args[0])
}

func booksUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] books update -body JSON -id INT

Update a book.
    -body JSON: 
    -id INT: Book ID

Example:
    %[1]s books update --body '{
      "author": "Tenetur nemo amet iste saepe molestias est.",
      "book_cover": {
         "bytes": "SW4gcmVtIG5vbi4=",
         "name": "Architecto sapiente nesciunt aut repellendus rerum quia.",
         "type": "Rerum enim quibusdam qui qui hic quia."
      },
      "published_at": "2023-12-31",
      "title": "Consequatur sapiente aut occaecati."
   }' --id 3733984170189243710
`, os.Args[0])
}

func booksDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] books delete -id INT

Delete a book.
    -id INT: Book ID

Example:
    %[1]s books delete --id 7974043726069875420
`, os.Args[0])
}
