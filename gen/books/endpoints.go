// Code generated by goa v3.14.1, DO NOT EDIT.
//
// books endpoints
//
// Command:
// $ goa gen bookapp/design

package books

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "books" service endpoints.
type Endpoints struct {
	FindAll  goa.Endpoint
	FindByID goa.Endpoint
	Create   goa.Endpoint
	Update   goa.Endpoint
	Delete   goa.Endpoint
}

// NewEndpoints wraps the methods of the "books" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		FindAll:  NewFindAllEndpoint(s),
		FindByID: NewFindByIDEndpoint(s),
		Create:   NewCreateEndpoint(s),
		Update:   NewUpdateEndpoint(s),
		Delete:   NewDeleteEndpoint(s),
	}
}

// Use applies the given middleware to all the "books" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.FindAll = m(e.FindAll)
	e.FindByID = m(e.FindByID)
	e.Create = m(e.Create)
	e.Update = m(e.Update)
	e.Delete = m(e.Delete)
}

// NewFindAllEndpoint returns an endpoint function that calls the method
// "findAll" of service "books".
func NewFindAllEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		res, err := s.FindAll(ctx)
		if err != nil {
			return nil, err
		}
		vres := NewViewedBookCollection(res, "default")
		return vres, nil
	}
}

// NewFindByIDEndpoint returns an endpoint function that calls the method
// "findById" of service "books".
func NewFindByIDEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*FindByIDPayload)
		res, err := s.FindByID(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedBook(res, "default")
		return vres, nil
	}
}

// NewCreateEndpoint returns an endpoint function that calls the method
// "create" of service "books".
func NewCreateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreatePayload)
		return s.Create(ctx, p)
	}
}

// NewUpdateEndpoint returns an endpoint function that calls the method
// "update" of service "books".
func NewUpdateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdatePayload)
		return s.Update(ctx, p)
	}
}

// NewDeleteEndpoint returns an endpoint function that calls the method
// "delete" of service "books".
func NewDeleteEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DeletePayload)
		return s.Delete(ctx, p)
	}
}
