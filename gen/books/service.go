// Code generated by goa v3.14.1, DO NOT EDIT.
//
// books service
//
// Command:
// $ goa gen bookapp/design

package books

import (
	booksviews "bookapp/gen/books/views"
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Books Service
type Service interface {
	// FindAll Books
	FindAll(context.Context) (res BookCollection, err error)
	// Find book by id
	FindByID(context.Context, *FindByIDPayload) (res *Book, err error)
	// Create a new book.
	Create(context.Context, *CreatePayload) (res string, err error)
	// Update a book.
	Update(context.Context, *UpdatePayload) (res string, err error)
	// Delete a book.
	Delete(context.Context, *DeletePayload) (res string, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "books"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"findAll", "findById", "create", "update", "delete"}

// Book is the result type of the books service findById method.
type Book struct {
	// ID of book
	ID int
	// Title of book
	Title string
	// Author of book
	Author string
	// Image File base64
	BookCoverBytes []byte
	// Book cover file name
	BookCoverFileName *string
	// Book cover file type
	BookCoverFileType *string
	// Published date of the book
	PublishedAt string
}

// BookCollection is the result type of the books service findAll method.
type BookCollection []*Book

// CreatePayload is the payload type of the books service create method.
type CreatePayload struct {
	// Title of the book
	Title string
	// Author of the book
	Author string
	// Book cover image
	BookCover *File
	// Published date of the book
	PublishedAt string
}

// DeletePayload is the payload type of the books service delete method.
type DeletePayload struct {
	// Book ID
	ID *int
}

// Image Upload Type
type File struct {
	Type  *string
	Bytes []byte
	Name  *string
}

// FindByIDPayload is the payload type of the books service findById method.
type FindByIDPayload struct {
	// Book ID
	ID *int
}

// UpdatePayload is the payload type of the books service update method.
type UpdatePayload struct {
	// Book ID
	ID int
	// Title of the book
	Title *string
	// Author of the book
	Author *string
	// Book cover image
	BookCover *File
	// Published date of the book
	PublishedAt *string
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "NotFound", false, false, false)
}

// NewBookCollection initializes result type BookCollection from viewed result
// type BookCollection.
func NewBookCollection(vres booksviews.BookCollection) BookCollection {
	return newBookCollection(vres.Projected)
}

// NewViewedBookCollection initializes viewed result type BookCollection from
// result type BookCollection using the given view.
func NewViewedBookCollection(res BookCollection, view string) booksviews.BookCollection {
	p := newBookCollectionView(res)
	return booksviews.BookCollection{Projected: p, View: "default"}
}

// NewBook initializes result type Book from viewed result type Book.
func NewBook(vres *booksviews.Book) *Book {
	return newBook(vres.Projected)
}

// NewViewedBook initializes viewed result type Book from result type Book
// using the given view.
func NewViewedBook(res *Book, view string) *booksviews.Book {
	p := newBookView(res)
	return &booksviews.Book{Projected: p, View: "default"}
}

// newBookCollection converts projected type BookCollection to service type
// BookCollection.
func newBookCollection(vres booksviews.BookCollectionView) BookCollection {
	res := make(BookCollection, len(vres))
	for i, n := range vres {
		res[i] = newBook(n)
	}
	return res
}

// newBookCollectionView projects result type BookCollection to projected type
// BookCollectionView using the "default" view.
func newBookCollectionView(res BookCollection) booksviews.BookCollectionView {
	vres := make(booksviews.BookCollectionView, len(res))
	for i, n := range res {
		vres[i] = newBookView(n)
	}
	return vres
}

// newBook converts projected type Book to service type Book.
func newBook(vres *booksviews.BookView) *Book {
	res := &Book{
		BookCoverBytes:    vres.BookCoverBytes,
		BookCoverFileName: vres.BookCoverFileName,
		BookCoverFileType: vres.BookCoverFileType,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Title != nil {
		res.Title = *vres.Title
	}
	if vres.Author != nil {
		res.Author = *vres.Author
	}
	if vres.PublishedAt != nil {
		res.PublishedAt = *vres.PublishedAt
	}
	return res
}

// newBookView projects result type Book to projected type BookView using the
// "default" view.
func newBookView(res *Book) *booksviews.BookView {
	vres := &booksviews.BookView{
		ID:                &res.ID,
		Title:             &res.Title,
		Author:            &res.Author,
		BookCoverBytes:    res.BookCoverBytes,
		BookCoverFileName: res.BookCoverFileName,
		BookCoverFileType: res.BookCoverFileType,
		PublishedAt:       &res.PublishedAt,
	}
	return vres
}
