// Code generated by goa v3.14.1, DO NOT EDIT.
//
// books views
//
// Command:
// $ goa gen bookapp/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// BookCollection is the viewed result type that is projected based on a view.
type BookCollection struct {
	// Type to project
	Projected BookCollectionView
	// View to render
	View string
}

// Book is the viewed result type that is projected based on a view.
type Book struct {
	// Type to project
	Projected *BookView
	// View to render
	View string
}

// BookCollectionView is a type that runs validations on a projected type.
type BookCollectionView []*BookView

// BookView is a type that runs validations on a projected type.
type BookView struct {
	// ID of book
	ID *int
	// Title of book
	Title *string
	// Author of book
	Author *string
	// Image File base64
	BookCoverBytes []byte
	// Book cover file name
	BookCoverFileName *string
	// Book cover file type
	BookCoverFileType *string
	// Published date of the book
	PublishedAt *string
}

var (
	// BookCollectionMap is a map indexing the attribute names of BookCollection by
	// view name.
	BookCollectionMap = map[string][]string{
		"default": {
			"id",
			"title",
			"author",
			"book_cover_bytes",
			"book_cover_file_name",
			"book_cover_file_type",
			"published_at",
		},
	}
	// BookMap is a map indexing the attribute names of Book by view name.
	BookMap = map[string][]string{
		"default": {
			"id",
			"title",
			"author",
			"book_cover_bytes",
			"book_cover_file_name",
			"book_cover_file_type",
			"published_at",
		},
	}
)

// ValidateBookCollection runs the validations defined on the viewed result
// type BookCollection.
func ValidateBookCollection(result BookCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateBookCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateBook runs the validations defined on the viewed result type Book.
func ValidateBook(result *Book) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateBookView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateBookCollectionView runs the validations defined on
// BookCollectionView using the "default" view.
func ValidateBookCollectionView(result BookCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateBookView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateBookView runs the validations defined on BookView using the
// "default" view.
func ValidateBookView(result *BookView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "result"))
	}
	if result.Author == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("author", "result"))
	}
	if result.PublishedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("published_at", "result"))
	}
	return
}
